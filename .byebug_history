c
source=rack-timeout id=62604f3b-f75e-4214-9353-28a5f5b30838 timeout=20000ms service=0ms state=active
source=rack-timeout id=62604f3b-f75e-4214-9353-28a5f5b30838 timeout=20000ms state=ready
c
n
c
cc
c
rows[((rows.size) - 2)]
((rows.size) - 1)
(rows.size) - 1)
rows[2]
rows[3]
rows[((rows.size) - 1)]
rows[(rows.size) -1]
rows[3]
rows[rows.size -1]
rows.size
rows[2]
rows[3]
rows.offset(2).last
rows.offset(1).last
rows.count
rows
n
self
n
self
n
c
Enumeration.get_last_two_for(t_name, c_name, val)
Enumeration.next_last
Enumeration.last
Enumeration[:last]
Enumeration.all[2]
Enumeration.all[3]
Enumeration.all
Enumeration[2]
Enumeration[3]
Enumeration.all
result
n
hash
n
hash
n
hash
n
c
result[:next_last]
result[:next_last].value_count
result.last
result.first
result[1]
result[0]
result
n
c
n
Enumeration.get_last_two_for(t_name, c_name, val).size[:next_last].value_count
Enumeration.get_last_two_for(t_name, c_name, val).size[:next_last]
Enumeration.get_last_two_for(t_name, c_name, val).size
Enumeration.get_last_two_for(t_name, c_name, val)
c
n
c
expect(page).to have_content "Edit Profile"
n
c
exception
ar
af
n
c
expect(page).to have_content "logged in as #{valid_first_name} #{valid_last_name}"
c
status
n
sign_in(:user, user)
n
user.confirmed?
n
error
n
c
n
c
n
step
c
error
n
c
n
c
current_user
n
c
error
n
c
error
n
c
n
c
username
c
self.errors
self
n
c
n
step
Share::Project.count
c
n
c
n
e
n
e
n
transaction
n
error
n
status
n
c
exception
n
user.confirmed?
user.confirmed
user
UserMailer.send_event_notification('confirmed', user)
n
status
n
transaction
n
error
n
status
n
c
exception
n
step
n
confirmation_period_expired?
step
n
!confirmed?
step
c
visit "/users/confirmation?confirmation_token=#{user.confirmation_token}"
c
env
status
n
c
body
headers
status
n
user
user=User.where('confirmation_token=?',params['confirmation_token']).first
User.where('confirmation_token=?',params['confirmation_token']).first
c
n
User.where('confirmation_token=?',params['confirmation_token']).first
c
n
c
n
user.confirmation_token
n
user
n
user
n
c
n
c
n
c
self.confirmed_at_changed?
self.confirmed_at_was.nil?
self.save!
args[:ensure_valid]
self.confirmed_at_was.nil?
self.confirmed_at_changed?
self
n
step
n
step
n
c
n
step
SuppressorRegistry.suppressed[self.class.name]
step
n
step
n
step
n
c
n
user
uset
save(validate: args[:ensure_valid] == true)
n
step
n
step
n
c
n
pending_reconfirmation?
n
confirmation_period_expired?
step
n
step
n
c
n
(!confirmed? || pending_reconfirmation?)
!confirmed? || pending_reconfirmation?)
!confirmed?
pending_reconfirmation?
step
pending_any_confirmation
step
user
n
c
n
c
n
step
n
c
exception
n
AACT::Application::AACT_DB_SUPER_USERNAME
n
c
pluck(:username).uniq
pluck(:username)
uniq.pluck(:username)
n
c
