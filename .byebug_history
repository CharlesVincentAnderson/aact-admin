c
confirmed_at_was.nil?
confirmed_at_changed?
c
n
c
g
n
c
email_changed?
self
confirmed_at.changed?
confirmed_at
confirmed_at_was.nil?
confirmed_at_changed?
c
n
c
self.created_at
self
new_record?
new?
confirmed_at_was.nil?
confirmed_at_changed?
<pre>confirmed_at_changed?</pre>
c
user.confirmed_at_was.nil?
user.confirmed_at_changed?
user.reload
user.confirmed?
user.confirmed_at_changed?
user.confirmed_at
user.confirm
user.confirmed_at
user.confirm_at
user.confirmed?
user.confirmed_at_changed?
c
user.confirmed_at_changed?
user.confirmed?
user.save
user
user.save!
c
user.confirmed_at_changed?
user.confirm_at_changed?
user
user.confirm
c
mgr.can_create_user_account?(self)
c
mgr
mgr.can_create_user_account?(self)
c
user.save!
c
user.save!
c
user.save!
c
user.save!
user
c
ENV['AACT_PUBLIC_DATABASE_URL']
ENV'[AACT_PUBLIC_DATABASE_URL']
ENV'[AACT_PUBLIC_DATABASE_URL;]
AACT::Application::AACT_PUBLIC_DATABASE_NAME
c
AACT::Application::AACT_PUBLIC_DATABASE_NAME
user
user.save!
user
n
c
n
pp con
n
con
n
AACT::Application::AACT_PUBLIC_HOSTNAME
AACT::Application::AACT_PUBLIC_DATABASE_NAME
n
@dbconfig["test"]
n
c
n
user = User.find 1
User.all
c
user
n
user
n
c
user.remove
user
n
user
n
c
user.confirmed?
user.reload
c
username
c
n
c
username
n
c
error
n
c
user.confirmed?
user.reload
user.confirmed?
expect(page).to have_content "logged in as #{valid_first_name} #{valid_last_name}"
c
exception
n
s
SuppressorRegistry.suppressed[self.class.name]
step
n
step
n
step
c
exception
n
saved
n
step
n
step
n
c
nn
n
step
n
c
user
user.confirm
user.confim
user.confirmed?
c
self.confirmed?
self
user.confirmed?
n
user.confirmed?
user.confirmation_token
c
user
n
step
n
step
n
c
n
c
n
step
n
step
expect(page).to have_content "logged in as #{valid_first_name} #{valid_last_name}"
c
source=rack-timeout id=62604f3b-f75e-4214-9353-28a5f5b30838 timeout=20000ms service=0ms state=active
source=rack-timeout id=62604f3b-f75e-4214-9353-28a5f5b30838 timeout=20000ms state=ready
c
n
c
cc
c
rows[((rows.size) - 2)]
((rows.size) - 1)
(rows.size) - 1)
rows[2]
rows[3]
rows[((rows.size) - 1)]
rows[(rows.size) -1]
rows[3]
rows[rows.size -1]
rows.size
rows[2]
rows[3]
rows.offset(2).last
rows.offset(1).last
rows.count
rows
n
self
n
self
n
c
Enumeration.get_last_two_for(t_name, c_name, val)
Enumeration.next_last
Enumeration.last
Enumeration[:last]
Enumeration.all[2]
Enumeration.all[3]
Enumeration.all
Enumeration[2]
Enumeration[3]
Enumeration.all
result
n
hash
n
hash
n
hash
n
c
result[:next_last]
result[:next_last].value_count
result.last
result.first
result[1]
result[0]
result
n
c
n
Enumeration.get_last_two_for(t_name, c_name, val).size[:next_last].value_count
Enumeration.get_last_two_for(t_name, c_name, val).size[:next_last]
Enumeration.get_last_two_for(t_name, c_name, val).size
Enumeration.get_last_two_for(t_name, c_name, val)
c
n
c
expect(page).to have_content "Edit Profile"
n
c
exception
ar
af
n
c
expect(page).to have_content "logged in as #{valid_first_name} #{valid_last_name}"
c
status
n
sign_in(:user, user)
n
user.confirmed?
n
error
n
c
n
c
n
